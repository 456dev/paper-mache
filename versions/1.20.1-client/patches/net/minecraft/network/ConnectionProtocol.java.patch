--- a/net/minecraft/network/ConnectionProtocol.java
+++ b/net/minecraft/network/ConnectionProtocol.java
@@ -130,6 +130,7 @@
 import net.minecraft.network.protocol.game.ClientboundUpdateMobEffectPacket;
 import net.minecraft.network.protocol.game.ClientboundUpdateRecipesPacket;
 import net.minecraft.network.protocol.game.ClientboundUpdateTagsPacket;
+import net.minecraft.network.protocol.game.ServerGamePacketListener;
 import net.minecraft.network.protocol.game.ServerboundAcceptTeleportationPacket;
 import net.minecraft.network.protocol.game.ServerboundBlockEntityTagQuery;
 import net.minecraft.network.protocol.game.ServerboundChangeDifficultyPacket;
@@ -179,16 +180,21 @@
 import net.minecraft.network.protocol.game.ServerboundUseItemOnPacket;
 import net.minecraft.network.protocol.game.ServerboundUseItemPacket;
 import net.minecraft.network.protocol.handshake.ClientIntentionPacket;
+import net.minecraft.network.protocol.handshake.ServerHandshakePacketListener;
+import net.minecraft.network.protocol.login.ClientLoginPacketListener;
 import net.minecraft.network.protocol.login.ClientboundCustomQueryPacket;
 import net.minecraft.network.protocol.login.ClientboundGameProfilePacket;
 import net.minecraft.network.protocol.login.ClientboundHelloPacket;
 import net.minecraft.network.protocol.login.ClientboundLoginCompressionPacket;
 import net.minecraft.network.protocol.login.ClientboundLoginDisconnectPacket;
+import net.minecraft.network.protocol.login.ServerLoginPacketListener;
 import net.minecraft.network.protocol.login.ServerboundCustomQueryPacket;
 import net.minecraft.network.protocol.login.ServerboundHelloPacket;
 import net.minecraft.network.protocol.login.ServerboundKeyPacket;
+import net.minecraft.network.protocol.status.ClientStatusPacketListener;
 import net.minecraft.network.protocol.status.ClientboundPongResponsePacket;
 import net.minecraft.network.protocol.status.ClientboundStatusResponsePacket;
+import net.minecraft.network.protocol.status.ServerStatusPacketListener;
 import net.minecraft.network.protocol.status.ServerboundPingRequestPacket;
 import net.minecraft.network.protocol.status.ServerboundStatusRequestPacket;
 import net.minecraft.util.VisibleForDebug;
@@ -196,14 +202,14 @@
 
 public enum ConnectionProtocol implements BundlerInfo.Provider {
     HANDSHAKING(
-        -1, protocol().addFlow(PacketFlow.SERVERBOUND, new ConnectionProtocol.PacketSet().addPacket(ClientIntentionPacket.class, ClientIntentionPacket::new))
+        -1, protocol().addFlow(PacketFlow.SERVERBOUND, new ConnectionProtocol.PacketSet<ServerHandshakePacketListener>().addPacket(ClientIntentionPacket.class, ClientIntentionPacket::new))
     ),
     PLAY(
         0,
         protocol()
             .addFlow(
                 PacketFlow.CLIENTBOUND,
-                new ConnectionProtocol.PacketSet()
+                new ConnectionProtocol.PacketSet<net.minecraft.network.protocol.game.ClientGamePacketListener>()
                     .withBundlePacket(ClientboundBundlePacket.class, ClientboundBundlePacket::new)
                     .addPacket(ClientboundAddEntityPacket.class, ClientboundAddEntityPacket::new)
                     .addPacket(ClientboundAddExperienceOrbPacket.class, ClientboundAddExperienceOrbPacket::new)
@@ -318,7 +324,7 @@
             )
             .addFlow(
                 PacketFlow.SERVERBOUND,
-                new ConnectionProtocol.PacketSet()
+                new ConnectionProtocol.PacketSet<ServerGamePacketListener>()
                     .addPacket(ServerboundAcceptTeleportationPacket.class, ServerboundAcceptTeleportationPacket::new)
                     .addPacket(ServerboundBlockEntityTagQuery.class, ServerboundBlockEntityTagQuery::new)
                     .addPacket(ServerboundChangeDifficultyPacket.class, ServerboundChangeDifficultyPacket::new)
@@ -377,13 +383,13 @@
         protocol()
             .addFlow(
                 PacketFlow.SERVERBOUND,
-                new ConnectionProtocol.PacketSet()
+                new ConnectionProtocol.PacketSet<ServerStatusPacketListener>()
                     .addPacket(ServerboundStatusRequestPacket.class, ServerboundStatusRequestPacket::new)
                     .addPacket(ServerboundPingRequestPacket.class, ServerboundPingRequestPacket::new)
             )
             .addFlow(
                 PacketFlow.CLIENTBOUND,
-                new ConnectionProtocol.PacketSet()
+                new ConnectionProtocol.PacketSet<ClientStatusPacketListener>()
                     .addPacket(ClientboundStatusResponsePacket.class, ClientboundStatusResponsePacket::new)
                     .addPacket(ClientboundPongResponsePacket.class, ClientboundPongResponsePacket::new)
             )
@@ -393,7 +399,7 @@
         protocol()
             .addFlow(
                 PacketFlow.CLIENTBOUND,
-                new ConnectionProtocol.PacketSet()
+                new ConnectionProtocol.PacketSet<ClientLoginPacketListener>()
                     .addPacket(ClientboundLoginDisconnectPacket.class, ClientboundLoginDisconnectPacket::new)
                     .addPacket(ClientboundHelloPacket.class, ClientboundHelloPacket::new)
                     .addPacket(ClientboundGameProfilePacket.class, ClientboundGameProfilePacket::new)
@@ -402,7 +408,7 @@
             )
             .addFlow(
                 PacketFlow.SERVERBOUND,
-                new ConnectionProtocol.PacketSet()
+                new ConnectionProtocol.PacketSet<ServerLoginPacketListener>()
                     .addPacket(ServerboundHelloPacket.class, ServerboundHelloPacket::new)
                     .addPacket(ServerboundKeyPacket.class, ServerboundKeyPacket::new)
                     .addPacket(ServerboundCustomQueryPacket.class, ServerboundCustomQueryPacket::new)
@@ -541,7 +547,7 @@
         }
 
         public void listAllPackets(Consumer<Class<? extends Packet<?>>> consumer) {
-            this.classToId.keySet().stream().filter(clazz -> clazz != BundleDelimiterPacket.class).forEach(consumer);
+            this.classToId.keySet().stream().filter(clazz -> clazz != (Object) BundleDelimiterPacket.class).forEach(consumer);
             this.extraClasses.forEach(consumer);
         }
 
