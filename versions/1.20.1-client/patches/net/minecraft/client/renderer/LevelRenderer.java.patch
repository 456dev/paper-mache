--- a/net/minecraft/client/renderer/LevelRenderer.java
+++ b/net/minecraft/client/renderer/LevelRenderer.java
@@ -3162,7 +3162,7 @@
             case 2007:
                 Vec3 vec3 = Vec3.atBottomCenterOf(pos);
 
-                for(int stepX = 0; stepX < 8; ++stepX) {
+                for(int i = 0; i < 8; ++i) {
                     this.addParticle(
                         new ItemParticleOption(ParticleTypes.ITEM, new ItemStack(Items.SPLASH_POTION)),
                         vec3.x,
@@ -3180,18 +3180,18 @@
                 ParticleOptions particleOptions = type == 2007 ? ParticleTypes.INSTANT_EFFECT : ParticleTypes.EFFECT;
 
                 for(int i2 = 0; i2 < 100; ++i2) {
-                    double d1 = randomSource.nextDouble() * 4.0;
-                    double d2 = randomSource.nextDouble() * Math.PI * 2.0;
-                    double d12 = Math.cos(d2) * d1;
+                    double d10 = randomSource.nextDouble() * 4.0;
+                    double d11 = randomSource.nextDouble() * Math.PI * 2.0;
+                    double d12 = Math.cos(d11) * d10;
                     double d13 = 0.01 + randomSource.nextDouble() * 0.5;
-                    double d14 = Math.sin(d2) * d1;
+                    double d14 = Math.sin(d11) * d10;
                     Particle particle = this.addParticleInternal(
                         particleOptions, particleOptions.getType().getOverrideLimiter(), vec3.x + d12 * 0.1, vec3.y + 0.3, vec3.z + d14 * 0.1, d12, d13, d14
                     );
                     if (particle != null) {
                         float f3 = 0.75F + randomSource.nextFloat() * 0.25F;
                         particle.setColor(f * f3, f1 * f3, f2 * f3);
-                        particle.setPower((float)d1);
+                        particle.setPower((float)d10);
                     }
                 }
 
@@ -3200,31 +3200,31 @@
             case 2003:
                 double d10 = (double)pos.getX() + 0.5;
                 double d11 = (double)pos.getY();
-                double d = (double)pos.getZ() + 0.5;
+                double d12 = (double)pos.getZ() + 0.5;
 
                 for(int i1 = 0; i1 < 8; ++i1) {
                     this.addParticle(
                         new ItemParticleOption(ParticleTypes.ITEM, new ItemStack(Items.ENDER_EYE)),
                         d10,
                         d11,
-                        d,
+                        d12,
                         randomSource.nextGaussian() * 0.15,
                         randomSource.nextDouble() * 0.2,
                         randomSource.nextGaussian() * 0.15
                     );
                 }
 
-                for(double d1 = 0.0; d1 < Math.PI * 2; d1 += Math.PI / 20) {
+                for(double d13 = 0.0; d13 < Math.PI * 2; d13 += Math.PI / 20) {
                     this.addParticle(
-                        ParticleTypes.PORTAL, d10 + Math.cos(d1) * 5.0, d11 - 0.4, d + Math.sin(d1) * 5.0, Math.cos(d1) * -5.0, 0.0, Math.sin(d1) * -5.0
+                        ParticleTypes.PORTAL, d10 + Math.cos(d13) * 5.0, d11 - 0.4, d12 + Math.sin(d13) * 5.0, Math.cos(d13) * -5.0, 0.0, Math.sin(d13) * -5.0
                     );
                     this.addParticle(
-                        ParticleTypes.PORTAL, d10 + Math.cos(d1) * 5.0, d11 - 0.4, d + Math.sin(d1) * 5.0, Math.cos(d1) * -7.0, 0.0, Math.sin(d1) * -7.0
+                        ParticleTypes.PORTAL, d10 + Math.cos(d13) * 5.0, d11 - 0.4, d12 + Math.sin(d13) * 5.0, Math.cos(d13) * -7.0, 0.0, Math.sin(d13) * -7.0
                     );
                 }
                 break;
             case 2004:
-                for(int stepY = 0; stepY < 20; ++stepY) {
+                for(int i = 0; i < 20; ++i) {
                     double d15 = (double)pos.getX() + 0.5 + (randomSource.nextDouble() - 0.5) * 2.0;
                     double d16 = (double)pos.getY() + 0.5 + (randomSource.nextDouble() - 0.5) * 2.0;
                     double d17 = (double)pos.getZ() + 0.5 + (randomSource.nextDouble() - 0.5) * 2.0;
@@ -3239,17 +3239,17 @@
                 for(int i2 = 0; i2 < 200; ++i2) {
                     float f8 = randomSource.nextFloat() * 4.0F;
                     float f11 = randomSource.nextFloat() * (float) (Math.PI * 2);
-                    double d2 = (double)(Mth.cos(f11) * f8);
-                    double d12 = 0.01 + randomSource.nextDouble() * 0.5;
+                    double d14 = (double)(Mth.cos(f11) * f8);
+                    double d15 = 0.01 + randomSource.nextDouble() * 0.5;
                     double d13 = (double)(Mth.sin(f11) * f8);
                     Particle particle1 = this.addParticleInternal(
                         ParticleTypes.DRAGON_BREATH,
                         false,
-                        (double)pos.getX() + d2 * 0.1,
+                        (double)pos.getX() + d14 * 0.1,
                         (double)pos.getY() + 0.3,
                         (double)pos.getZ() + d13 * 0.1,
-                        d2,
-                        d12,
+                        d14,
+                        d15,
                         d13
                     );
                     if (particle1 != null) {
@@ -3317,16 +3317,16 @@
                 ParticleUtils.spawnParticlesOnBlockFaces(this.level, pos, ParticleTypes.SCRAPE, UniformInt.of(3, 5));
                 break;
             case 3006:
-                int stepY = data >> 6;
-                if (stepY > 0) {
-                    if (randomSource.nextFloat() < 0.3F + (float)stepY * 0.1F) {
-                        float f2 = 0.15F + 0.02F * (float)stepY * (float)stepY * randomSource.nextFloat();
-                        float f4 = 0.4F + 0.3F * (float)stepY * randomSource.nextFloat();
-                        this.level.playLocalSound(pos, SoundEvents.SCULK_BLOCK_CHARGE, SoundSource.BLOCKS, f2, f4, false);
+                int i1 = data >> 6;
+                if (i1 > 0) {
+                    if (randomSource.nextFloat() < 0.3F + (float)i1 * 0.1F) {
+                        float f3 = 0.15F + 0.02F * (float)i1 * (float)i1 * randomSource.nextFloat();
+                        float f4 = 0.4F + 0.3F * (float)i1 * randomSource.nextFloat();
+                        this.level.playLocalSound(pos, SoundEvents.SCULK_BLOCK_CHARGE, SoundSource.BLOCKS, f3, f4, false);
                     }
 
                     byte b = (byte)(data & 63);
-                    IntProvider intProvider = UniformInt.of(0, stepY);
+                    IntProvider intProvider = UniformInt.of(0, i1);
                     float f5 = 0.005F;
                     Supplier<Vec3> supplier = () -> new Vec3(
                             Mth.nextDouble(randomSource, -0.005F, 0.005F),
@@ -3342,7 +3342,7 @@
                     } else {
                         for(Direction direction2 : MultifaceBlock.unpack(b)) {
                             float f7 = direction2 == Direction.UP ? (float) Math.PI : 0.0F;
-                            double d12 = 0.35;
+                            double d13 = 0.35;
                             ParticleUtils.spawnParticlesOnBlockFace(
                                 this.level, pos, new SculkChargeParticleOptions(f7), intProvider, direction2, supplier, 0.35
                             );
@@ -3373,10 +3373,10 @@
                 }
                 break;
             case 3007:
-                for(int stepZ = 0; stepZ < 10; ++stepZ) {
+                for(int i = 0; i < 10; ++i) {
                     this.level
                         .addParticle(
-                            new ShriekParticleOption(stepZ * 5),
+                            new ShriekParticleOption(i * 5),
                             false,
                             (double)pos.getX() + 0.5,
                             (double)pos.getY() + SculkShriekerBlock.TOP_Y,
@@ -3405,8 +3405,8 @@
                 break;
             case 3008:
                 BlockState blockState1 = Block.stateById(data);
-                Block blockState2 = blockState1.getBlock();
-                if (blockState2 instanceof BrushableBlock brushableBlock) {
+                Block block = blockState1.getBlock();
+                if (block instanceof BrushableBlock brushableBlock) {
                     this.level.playLocalSound(pos, brushableBlock.getBrushCompletedSound(), SoundSource.PLAYERS, 1.0F, 1.0F, false);
                 }
 
